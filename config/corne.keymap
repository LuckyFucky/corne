/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
            hold-trigger-on-release;
            require-prior-idle-ms = <150>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 36 37 38>;
            require-prior-idle-ms = <150>;
        };
    };

    combos {
        compatible = "zmk,combos";

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <25 26>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <27 28>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp GRAVE  &kp Q            &kp W            &kp E         &kp R              &kp T          &kp Y        &kp U              &kp I         &kp O            &kp P                    &kp LEFT_BRACKET
&kp TAB    &hml LEFT_GUI A  &hml LEFT_ALT S  &hml LCTRL D  &hml LEFT_SHIFT F  &kp G          &kp H        &hmr LEFT_SHIFT J  &hmr LCTRL K  &hmr LEFT_ALT L  &hmr LEFT_GUI SEMICOLON  &kp SQT
&kp LSHFT  &kp Z            &kp X            &kp C         &kp V              &kp B          &kp N        &kp M              &kp COMMA     &kp DOT          &kp FSLH                 &kp ESC
                                             &kp LGUI      &kp LCTRL          &lt 1 SPACE    &lt 3 ENTER  &mo 3              &kp BSPC
            >;
        };

        Num {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESC  &kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4    &kp N5             &kp NUMBER_6      &kp N7             &kp N8         &kp N9                &kp N0                 &kp BSPC
&trans   &kp EXCLAMATION  &kp AT_SIGN   &kp HASH      &kp DOLLAR      &kp PERCENT        &kp CARET         &kp AMPERSAND      &kp ASTERISK   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans   &kp EQUAL        &kp MINUS     &kp PLUS      &kp LEFT_BRACE  &kp RIGHT_BRACE    &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp SEMICOLON  &kp COLON             &kp NON_US_BACKSLASH   &trans
                                        &kp LGUI      &trans          &kp SPACE          &kp RET           &trans             &trans
            >;
        };

        Fn {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESC  &kp F12  &kp F7  &kp F8    &kp F9  &none        &none    &none   &kp C_VOLUME_UP    &none  &none  &trans
&none    &kp F11  &kp F4  &kp F5    &kp F6  &trans       &none    &none   &kp C_VOLUME_DOWN  &none  &none  &none
&none    &kp F10  &kp F1  &kp F2    &kp F3  &trans       &none    &none   &none              &none  &none  &none
                          &kp LGUI  &trans  &kp SPACE    &kp RET  &trans  &trans
            >;
        };

        Nav {
            bindings = <
&bt BT_DISC 0    &bt BT_SEL 0     &bt BT_SEL 1  &none   &none   &none     &kp PG_UP      &kp LC(LEFT)    &kp UP    &kp LC(RIGHT)  &none  &kp DEL
&rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &none         &none   &none   &none     &kp PAGE_DOWN  &kp LEFT_ARROW  &kp DOWN  &kp RIGHT      &none  &kp BACKSPACE
&none            &none            &none         &none   &none   &none     &none          &kp HOME        &none     &kp END        &none  &kp ESC
                                                &trans  &trans  &trans    &trans         &trans          &trans
            >;
        };

        layer_4 {
            bindings = <
&kp TAB  &kp N1        &kp N2        &kp N3        &kp N4        &kp N5          &kp N6    &kp N7             &kp N8  &kp N9     &kp N0  &kp BSPC
&none    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp LEFT  &kp DOWN           &kp UP  &kp RIGHT  &trans  &trans
&none    &trans        &trans        &trans        &trans        &trans          &trans    &kp RIGHT_BRACKET  &trans  &trans     &trans  &trans
                                     &kp LGUI      &trans        &kp SPACE       &kp RET   &trans             &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        fn {
            if-layers = <1 3>;
            then-layer = <2>;
        };
    };
};
